openapi: 3.0.3
info:
  title: Todo System API
  description: API for Todo System with user authentication and todo management
  version: 1.0.0
  contact:
    name: Todo System Team
servers:
  - url: http://localhost:3001
    description: User Service
  - url: http://localhost:3002
    description: Todo Service

paths:
  /api/users/register:
    post:
      summary: Register a new user
      tags: [Authentication]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [email, password]
              properties:
                email:
                  type: string
                  format: email
                  example: user@example.com
                password:
                  type: string
                  minLength: 6
                  example: password123
      responses:
        '201':
          description: User registered successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  user:
                    type: object
                    properties:
                      uuid:
                        type: string
                      email:
                        type: string
                      created_at:
                        type: string
                        format: date-time
        '400':
          description: Invalid input data
        '409':
          description: Email already registered

  /api/users/login:
    post:
      summary: Login user
      tags: [Authentication]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [email, password]
              properties:
                email:
                  type: string
                  format: email
                  example: user@example.com
                password:
                  type: string
                  example: password123
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  token:
                    type: string
                  user:
                    type: object
                    properties:
                      uuid:
                        type: string
                      email:
                        type: string
        '401':
          description: Invalid credentials

  /api/todos:
    get:
      summary: Get user's todos
      tags: [Todos]
      security:
        - bearerAuth: []
      responses:
        '200':
          description: List of todos
          content:
            application/json:
              schema:
                type: object
                properties:
                  todos:
                    type: array
                    items:
                      $ref: '#/components/schemas/Todo'
        '401':
          description: Unauthorized

    post:
      summary: Create a new todo
      tags: [Todos]
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [title]
              properties:
                title:
                  type: string
                  maxLength: 255
                  example: Buy groceries
                description:
                  type: string
                  maxLength: 1000
                  example: Milk, bread, eggs
      responses:
        '201':
          description: Todo created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  todo:
                    $ref: '#/components/schemas/Todo'
        '400':
          description: Invalid input data
        '401':
          description: Unauthorized

  /api/todos/{id}:
    put:
      summary: Update a todo
      tags: [Todos]
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
          description: Todo ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                  maxLength: 255
                description:
                  type: string
                  maxLength: 1000
                completed:
                  type: boolean
      responses:
        '200':
          description: Todo updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  todo:
                    $ref: '#/components/schemas/Todo'
        '400':
          description: Invalid input data
        '401':
          description: Unauthorized
        '403':
          description: Access denied
        '404':
          description: Todo not found

    delete:
      summary: Delete a todo
      tags: [Todos]
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
          description: Todo ID
      responses:
        '204':
          description: Todo deleted successfully
        '401':
          description: Unauthorized
        '403':
          description: Access denied
        '404':
          description: Todo not found

components:
  schemas:
    Todo:
      type: object
      properties:
        id:
          type: integer
        user_uuid:
          type: string
        title:
          type: string
        description:
          type: string
        completed:
          type: boolean
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time

  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT 